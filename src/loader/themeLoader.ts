import { stringifyRequest } from 'loader-utils'
import { selfModuleName } from '../lib/selfContext'
import { isFromModule } from '../lib/resolve'
import { PluginLoader } from '../Plugin'
import { getQueryObject } from '../lib/utils'
import extractLoader from './extractLoader'

type LoaderContext = import('webpack').loader.LoaderContext

function checkAndSetLoader(loaderContext: LoaderContext) {
  const { loaders } = loaderContext

  for (const loader of [...loaders]) {
    if (typeof loader !== 'object') {
      continue
    }
    const { path: loaderPath } = loader
    if (
      // 这些extract相关的loader提供的API要么不适合当前需求，要么过期不维护，要么有bug
      isFromModule('mini-css-extract-plugin', loaderPath) ||
      isFromModule('extract-css-chunks-webpack-plugin', loaderPath) ||
      isFromModule('extract-text-webpack-plugin', loaderPath) ||
      isFromModule('extract-loader', loaderPath) ||
      // 我们不需要style-loader将样式转换为js模块
      isFromModule('style-loader', loaderPath) ||
      // 先清除已使用的file-loader，后面我们再添加
      isFromModule('file-loader', loaderPath)
    ) {
      loaders.splice(loaders.indexOf(loader), 1)
    }
  }

  const { esModule, publicPath, outputPath, filename } = themeLoader.getPluginOptions!()

  // 添加loader
  loaders.splice(
    1, // 0号索引为当前theme-loader，我们添加新loader到当前loader的后面
    0,
    // 这里的添加顺序不能错
    {
      ident: 'file-loader',
      path: require.resolve('file-loader'),
      options: {
        esModule,
        outputPath,
        publicPath,
        name: filename,
      },
    },
    {
      // 使用自己实现的css资源抽取loader
      ident: 'extract-css-loader',
      path: extractLoader.filepath,
    }
  )
}

function getThemeResource(loaderContext: LoaderContext) {
  const { resourcePath, resourceQuery } = loaderContext
  return stringifyRequest(loaderContext, __filename + '!' + resourcePath + resourceQuery)
}

export const pitch: PluginLoader['pitch'] = function () {
  const { loaders, resourceQuery } = this
  const { esModule } = getQueryObject(resourceQuery)
  if (loaders.length < 2) {
    // 首次由主题模块请求进入
    // 模块默认导出的是通过file-loader发布资源后的资源路径
    // 变量的抽取将由vars-loader处理
    const resource = getThemeResource(this)
    const imports = esModule
      ? `import cssPath from ${resource}`
      : `const cssPath = require(${resource})`
    const exports = esModule ? `export default cssPath` : `module.exports = cssPath`
    this.callback(null, `// generated by ${selfModuleName}\n\n${imports}\n\n${exports}\n`)
  } else {
    // 转发资源请求时进入
    // 检查并添加新的loader
    checkAndSetLoader(this)
    // 执行loader链
    this.callback(null)
  }
}

const themeLoader: PluginLoader = function (source, map) {
  // 因为对于当前请求，我们是两次进入theme-loader，所以在normal阶段我们需要返回模块内容
  this.callback(null, source, map)
}

themeLoader.filepath = __filename
themeLoader.pitch = pitch
export default themeLoader
