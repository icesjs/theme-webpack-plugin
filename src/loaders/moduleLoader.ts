import { stringifyRequest } from 'loader-utils'
import { selfModuleName } from '../lib/selfContext'
import { escapeRegExpChar, getQueryObject, themeRequestToken } from '../lib/utils'
import { isFromModule } from '../lib/resolve'
import { ValidPluginOptions } from '../options'
import { LoaderContext, PluginLoader } from '../ThemePlugin'
import varsLoader from './varsLoader'
import scopeLoader from './scopeLoader'

interface LoaderOptions extends ValidPluginOptions {
  syntax: string
}

function checkAndSetLoader(loaderContext: LoaderContext, options: LoaderOptions) {
  const { loaders } = loaderContext
  const { extract, syntax, onlyColor, themeAttrName } = options
  const matchLoaderRegx = new RegExp(
    String.raw`^(?:postcss|${
      syntax === 'auto' ? 'less|s[ac]ss|css' : escapeRegExpChar(syntax || 'css')
    })-loader$`
  )
  let preProcessorLoaderIndex = loaders.length
  while (--preProcessorLoaderIndex > -1) {
    if (isFromModule(matchLoaderRegx, loaders[preProcessorLoaderIndex].path)) {
      break
    }
  }

  if (preProcessorLoaderIndex !== -1) {
    const injectLoaders = []
    const loaderOptions = {
      token: themeRequestToken,
      isStyleModule: true,
      onlyColor,
      syntax,
    }
    if (!extract) {
      injectLoaders.push({
        path: scopeLoader.filepath,
        options: { ...loaderOptions, themeAttrName },
        ident: 'theme-scope-loader',
      })
    }
    injectLoaders.push({
      path: varsLoader.filepath,
      options: { ...loaderOptions },
      ident: 'theme-vars-loader',
    })
    loaders.splice(preProcessorLoaderIndex + 1, 0, ...injectLoaders)
  }
}

export const pitch: PluginLoader['pitch'] = function (request: string) {
  const pluginOptions = moduleLoader.getPluginOptions!()
  const { loaders } = this
  if (loaders.length < 2) {
    const { esModule } = pluginOptions
    const resource = stringifyRequest(this, `${__filename}${loaders[0].query || ''}!${request}`)
    const codeSnippets = esModule
      ? [`export * from ${resource}`, `export { default } from ${resource}`]
      : [`module.exports = require(${resource})`]
    this.callback(null, `// generated by ${selfModuleName}\n\n${codeSnippets.join('\n')}\n`)
  } else {
    const options = Object.assign(pluginOptions, getQueryObject(this.query))
    checkAndSetLoader(this, options as LoaderOptions)
    this.callback(null)
  }
}

const moduleLoader: PluginLoader = function (source, map, meta) {
  this.callback(null, source, map, meta)
}

moduleLoader.pitch = pitch
moduleLoader.filepath = __filename
export default moduleLoader
